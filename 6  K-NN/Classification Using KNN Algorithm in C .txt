#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// Veri noktası yapısı
struct DataPoint {
    double x;
    double y;
    char label; // Sınıf etiketi // A,B
};

// KNN algoritması
char kNearestNeighbors
(struct DataPoint *data, int dataSize, double testX, double testY, int k) {
    // Uzaklığı hesaplamak için Euclidean mesafesi kullanılır
    // Diğer mesafe ölçütleri de kullanılabilir
    double distances[dataSize];

    // Uzaklıkları hesapla
    for (int i = 0; i < dataSize; ++i) {
        distances[i] = sqrt(pow(data[i].x - testX, 2) + pow(data[i].y - testY, 2));
    }

    // Uzaklıkları sırala ve indeksleri al
    int sortedIndices[dataSize]; // dataSize = 4
    for (int i = 0; i < dataSize; ++i) {
        sortedIndices[i] = i; // sortedIndices = 0 , 1 , 2 , 3
    }

    // Sıralama algoritması 
    for (int i = 0; i < dataSize - 1; ++i) {
        for (int j = 0; j < dataSize - i - 1; ++j) {
            if (distances[j] > distances[j + 1]) {
                // Mesafeleri ve indeksleri değiştir
                double tempDist = distances[j];
                distances[j] = distances[j + 1];
                distances[j + 1] = tempDist;

                int tempIndex = sortedIndices[j];
                sortedIndices[j] = sortedIndices[j + 1];
                sortedIndices[j + 1] = tempIndex;
            }
        }
    }
    
    /*
    for (int i=0 ; i < dataSize ; ++i)
    {
        printf("%f\n",distances[i]);
    }
    for (int i=0 ; i < dataSize ; ++i)
    {
        printf("%d\n",sortedIndices[i]);
    }
    printf("\n");
    */
    
    
    // En yakın k komşuyu seç
    int classCounts[2] = {0}; // İki sınıf için sayıcı
    for (int i = 0; i < k; ++i) { // 0,1,2
        char currentLabel = data[sortedIndices[i]].label;
        printf("%c",currentLabel);printf("\n");
        
        // Şart Koşullu 
        (currentLabel == 'G') ? classCounts[0]++ : classCounts[1]++;
    }

    // En çok bulunan sınıfı seç
    if (classCounts[0] > classCounts[1]) {
        return 'G';
    } else {
        return 'B';
    }
}

int main() {
    // Örnek veri noktaları
    struct DataPoint data[] = {
        {7, 70, 'B'}, // [0]
        {7, 40, 'B'}, // [1]
        {3, 40, 'G'}, // [2]
        {1, 40, 'G'}, // [3]
        //{5, 50, 'G'}, // [4]
        //{10,80, 'B'}  // [5]
    };
    
    // Test veri noktası
    double testX = 3;
    double testY = 70;

    // K değeri
    int k = 3; // k=5 olsaydi

    // KNN'u uygula                         // 96           // 24
    char result = kNearestNeighbors(data, sizeof(data) / sizeof(data[0]), testX, testY, k); // A yada B

    // Sonucu yazdır
    printf("Test noktasının sınıfı: %c\n", result);
    
    
    return 0;
}